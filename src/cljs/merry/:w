(ns merry.core
  (:require
   [day8.re-frame.http-fx]
   [reagent.dom :as rdom]
   [reagent.core :as r]
   [re-frame.core :as rf]
   [goog.events :as events]
   [goog.history.EventType :as HistoryEventType]
   [markdown.core :refer [md->html]]
   [merry.ajax :as ajax]
   [merry.events]
   [reitit.core :as reitit]
   [reitit.frontend.easy :as rfe]
   [clojure.string :as string]
   [merry.widget :as w]
   [merry.views :as v])
  (:import goog.History))

(defn nav-link [uri title page]
  [:a.navbar-item
   {:href   uri
    :class (when (= page @(rf/subscribe [:common/page])) :is-active)}
   title])

(defn navbar []
  (r/with-let [expanded? (r/atom false)]
    [:nav.navbar.is-info>div.container
     [:div.navbar-brand
      [:a.navbar-item {:href "/" :style {:font-weight :bold}} "merry"]
      [:span.navbar-burger.burger
       {:data-target :nav-menu
        :on-click #(swap! expanded? not)
        :class (when @expanded? :is-active)}
       [:span] [:span] [:span]]]
     [:div#nav-menu.navbar-menu
      {:class (when @expanded? :is-active)}
      [:div.navbar-start
       [nav-link "#/" "Home" :home]
       [nav-link "#/about" "About" :about]
       [nav-link "#/org" "Org" :org]
       [nav-link "#/test" "Test" :test]]]]))

(defn about-page []
  [:section.section>div.container>div.content
   [:img {:src "/img/warning_clojure.png"}]])

(defn home-page []
  [:section.section>div.container>div.content
   (when-let [docs @(rf/subscribe [:docs])]
     [:div {:dangerouslySetInnerHTML {:__html (md->html docs)}}])])

(defn create-widget [view path]
  (let [opts (view path)]
    [w/widget (assoc opts :path path)]))

(defn test-page []

  [:section.section>div.container>div.content
   [w/widget v/parent-form]])

(defn org-page []
  (fn []
    (rf/dispatch [:get-new-org])
    [:section.section>div.container>div.content
     (when-let [org @(rf/subscribe [:new-org])]
       [w/widget org])]))

(defn page []
  (if-let [page @(rf/subscribe [:common/page])]
    [:div
     [navbar]
     [page]]))

(defn navigate! [match _]
  (rf/dispatch [:common/navigate match]))

(defn resource [resource-name]
  [(str "/" (name resource-name)) {:name resource-name
                                   :view #'org-page
                                   :controllers [{:start (fn [foo] (js/console.log "fooooo"))}]}])
(def router
  (reitit/router
   ["/"
    ["" {
         :name        :home
         :view        #'home-page
         :controllers [{:start (fn [_] (rf/dispatch [:page/init-home]))}]}]
    ["org"
     [""
      {
       :name        :org
       :view        #'home-page
       :controllers [{:start (fn [_] (js/console.log "/org"))}]}]

     ["/new"
      {
       :name        :org-new
       :view        #'home-page
       :controllers [{:start (fn [_] (js/console.log "/org/new called"))}]}]

     ["/:id"
      {
       :name        :org-fetch
       :view        #'home-page
       :controllers [{:start (fn [_] (js/console.log "/org/fetch called"))}]}]
     ]]))

(defn start-router! []
  (rfe/start!
   router
   navigate!
   {}))

;; -------------------------
;; Initialize app
(defn mount-components []
  (rf/clear-subscription-cache!)
  (rf/dispatch [:initialise-db])
  (rdom/render [#'page] (.getElementById js/document "app")))

(defn init! []
  (start-router!)
  (ajax/load-interceptors!)
  (mount-components))
